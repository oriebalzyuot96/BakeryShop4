{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\baker\\\\Desktop\\\\BakeryShop4\\\\client\\\\src\\\\context\\\\store.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport ShopContext from './shop-context';\nimport { shopReducer, ADD_PRODUCT, REMOVE_PRODUCT, FETCH_INIT, FETCH_SUCCESS, FETCH_FAILURE } from './reducers';\nimport categories from '../component/categories';\n\nconst GlobalState = props => {\n  const [state, dispatch] = React.useReducer(shopReducer, {\n    products: [],\n    cart: [],\n    isLoading: false,\n    isError: false\n  });\n\n  const addProductToCart = product => {\n    setTimeout(() => {\n      dispatch({\n        type: ADD_PRODUCT,\n        product: product\n      });\n    }, 700);\n  };\n\n  const removeProductFromCart = productId => {\n    setTimeout(() => {\n      dispatch({\n        type: REMOVE_PRODUCT,\n        productId: productId\n      });\n    }, 700);\n  };\n\n  const fetchProducts = async (token, category) => {\n    dispatch({\n      type: FETCH_INIT\n    });\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      const bodyParameters = {\n        category\n      };\n      const result = await axios.post(`http://localhost:7000/api/categories`, bodyParameters, config);\n\n      if (result.status === 201) {\n        dispatch({\n          type: FETCH_SUCCESS,\n          products: result.data.data.products\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: FETCH_FAILURE\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ShopContext.Provider, {\n    value: {\n      products: state.products,\n      cart: state.cart,\n      isLoading: state.isLoading,\n      isError: state.isError,\n      addProductToCart: addProductToCart,\n      removeProductFromCart: removeProductFromCart,\n      fetchProducts: fetchProducts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default GlobalState;","map":{"version":3,"sources":["C:/Users/baker/Desktop/BakeryShop4/client/src/context/store.js"],"names":["React","axios","ShopContext","shopReducer","ADD_PRODUCT","REMOVE_PRODUCT","FETCH_INIT","FETCH_SUCCESS","FETCH_FAILURE","categories","GlobalState","props","state","dispatch","useReducer","products","cart","isLoading","isError","addProductToCart","product","setTimeout","type","removeProductFromCart","productId","fetchProducts","token","category","config","headers","Authorization","bodyParameters","result","post","status","data","error","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,aANF,QAOO,YAPP;AAQA,OAAOC,UAAP,MAAuB,yBAAvB;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,KAAK,CAACc,UAAN,CAAiBX,WAAjB,EAA8B;AACtDY,IAAAA,QAAQ,EAAE,EAD4C;AAEtDC,IAAAA,IAAI,EAAE,EAFgD;AAGtDC,IAAAA,SAAS,EAAE,KAH2C;AAItDC,IAAAA,OAAO,EAAE;AAJ6C,GAA9B,CAA1B;;AAMA,QAAMC,gBAAgB,GAAGC,OAAO,IAAI;AAClCC,IAAAA,UAAU,CAAC,MAAM;AACfR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAElB,WAAR;AAAqBgB,QAAAA,OAAO,EAAEA;AAA9B,OAAD,CAAR;AACD,KAFS,EAEP,GAFO,CAAV;AAGD,GAJD;;AAKA,QAAMG,qBAAqB,GAAGC,SAAS,IAAI;AACzCH,IAAAA,UAAU,CAAC,MAAM;AACfR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEjB,cAAR;AAAwBmB,QAAAA,SAAS,EAAEA;AAAnC,OAAD,CAAR;AACD,KAFS,EAEP,GAFO,CAAV;AAGD,GAJD;;AAKA,QAAMC,aAAa,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AAC/Cd,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMsB,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASJ,KAAM;AAAjC;AADI,OAAf;AAGA,YAAMK,cAAc,GAAG;AACrBJ,QAAAA;AADqB,OAAvB;AAGA,YAAMK,MAAM,GAAG,MAAM/B,KAAK,CAACgC,IAAN,CAClB,sCADkB,EAEnBF,cAFmB,EAGnBH,MAHmB,CAArB;;AAKA,UAAII,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBrB,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAEf,aAAR;AAAuBQ,UAAAA,QAAQ,EAAEiB,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBpB;AAAlD,SAAD,CAAR;AACD;AACF,KAfD,CAeE,OAAOqB,KAAP,EAAc;AACdvB,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAR;AACD;AACF,GApBD;;AAqBA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QADX;AAELC,MAAAA,IAAI,EAAEJ,KAAK,CAACI,IAFP;AAGLC,MAAAA,SAAS,EAAEL,KAAK,CAACK,SAHZ;AAILC,MAAAA,OAAO,EAAEN,KAAK,CAACM,OAJV;AAKLC,MAAAA,gBAAgB,EAAEA,gBALb;AAMLI,MAAAA,qBAAqB,EAAEA,qBANlB;AAOLE,MAAAA,aAAa,EAAEA;AAPV,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGd,KAAK,CAAC0B,QAXT,CADF;AAeD,CArDD;;AAsDA,eAAe3B,WAAf","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nimport ShopContext from './shop-context'\r\nimport {\r\n  shopReducer,\r\n  ADD_PRODUCT,\r\n  REMOVE_PRODUCT,\r\n  FETCH_INIT,\r\n  FETCH_SUCCESS,\r\n  FETCH_FAILURE,\r\n} from './reducers'\r\nimport categories from '../component/categories'\r\nconst GlobalState = props => {\r\n  const [state, dispatch] = React.useReducer(shopReducer, {\r\n    products: [],\r\n    cart: [],\r\n    isLoading: false,\r\n    isError: false,\r\n  })\r\n  const addProductToCart = product => {\r\n    setTimeout(() => {\r\n      dispatch({ type: ADD_PRODUCT, product: product })\r\n    }, 700)\r\n  }\r\n  const removeProductFromCart = productId => {\r\n    setTimeout(() => {\r\n      dispatch({ type: REMOVE_PRODUCT, productId: productId })\r\n    }, 700)\r\n  }\r\n  const fetchProducts = async (token, category) => {\r\n    dispatch({ type: FETCH_INIT })\r\n    try {\r\n      const config = {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      }\r\n      const bodyParameters = {\r\n        category,\r\n      }\r\n      const result = await axios.post(\r\n        `http://localhost:7000/api/categories`,\r\n        bodyParameters,\r\n        config,\r\n      )\r\n      if (result.status === 201) {\r\n        dispatch({ type: FETCH_SUCCESS, products: result.data.data.products })\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: FETCH_FAILURE })\r\n    }\r\n  }\r\n  return (\r\n    <ShopContext.Provider\r\n      value={{\r\n        products: state.products,\r\n        cart: state.cart,\r\n        isLoading: state.isLoading,\r\n        isError: state.isError,\r\n        addProductToCart: addProductToCart,\r\n        removeProductFromCart: removeProductFromCart,\r\n        fetchProducts: fetchProducts,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ShopContext.Provider>\r\n  )\r\n}\r\nexport default GlobalState"]},"metadata":{},"sourceType":"module"}