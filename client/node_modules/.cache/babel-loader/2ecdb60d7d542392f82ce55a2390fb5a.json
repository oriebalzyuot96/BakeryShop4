{"ast":null,"code":"// import React from 'react'\n// import axios from 'axios'\n// import ShopContext from './shop-context'\n// import {\n//   shopReducer,\n//   ADD_PRODUCT,\n//   REMOVE_PRODUCT,\n//   FETCH_INIT,\n//   FETCH_SUCCESS,\n//   FETCH_FAILURE,\n// } from './reducers'\n// import categories from '../component/categories'\n// const GlobalState = props => {\n//   const [state, dispatch] = React.useReducer(shopReducer, {\n//     products: [],\n//     cart: [],\n//     isLoading: false,\n//     isError: false,\n//   })\n//   const addProductToCart = product => {\n//     setTimeout(() => {\n//       dispatch({ type: ADD_PRODUCT, product: product })\n//     }, 700)\n//   }\n//   const removeProductFromCart = productId => {\n//     setTimeout(() => {\n//       dispatch({ type: REMOVE_PRODUCT, productId: productId })\n//     }, 700)\n//   }\n//   const fetchProducts = async (token, category) => {\n//     dispatch({ type: FETCH_INIT })\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${token}` },\n//       }\n//       const bodyParameters = {\n//         category,\n//       }\n//       const result = await axios.post(\n//         `http://localhost:7000/api/categories`,\n//         bodyParameters,\n//         config,\n//       )\n//       if (result.status === 201) {\n//         dispatch({ type: FETCH_SUCCESS, products: result.data.data.products })\n//       }\n//     } catch (error) {\n//       dispatch({ type: FETCH_FAILURE })\n//     }\n//   }\n//   return (\n//     <ShopContext.Provider\n//       value={{\n//         products: state.products,\n//         cart: state.cart,\n//         isLoading: state.isLoading,\n//         isError: state.isError,\n//         addProductToCart: addProductToCart,\n//         removeProductFromCart: removeProductFromCart,\n//         fetchProducts: fetchProducts,\n//       }}\n//     >\n//       {props.children}\n//     </ShopContext.Provider>\n//   )\n// }\n// export default GlobalState","map":{"version":3,"sources":["C:/Users/baker/Desktop/BakeryShop4/client/src/context/store.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react'\n// import axios from 'axios'\n\n// import ShopContext from './shop-context'\n// import {\n//   shopReducer,\n//   ADD_PRODUCT,\n//   REMOVE_PRODUCT,\n//   FETCH_INIT,\n//   FETCH_SUCCESS,\n//   FETCH_FAILURE,\n// } from './reducers'\n// import categories from '../component/categories'\n\n// const GlobalState = props => {\n//   const [state, dispatch] = React.useReducer(shopReducer, {\n//     products: [],\n//     cart: [],\n//     isLoading: false,\n//     isError: false,\n//   })\n\n//   const addProductToCart = product => {\n//     setTimeout(() => {\n//       dispatch({ type: ADD_PRODUCT, product: product })\n//     }, 700)\n//   }\n\n//   const removeProductFromCart = productId => {\n//     setTimeout(() => {\n//       dispatch({ type: REMOVE_PRODUCT, productId: productId })\n//     }, 700)\n//   }\n\n//   const fetchProducts = async (token, category) => {\n//     dispatch({ type: FETCH_INIT })\n\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${token}` },\n//       }\n\n//       const bodyParameters = {\n//         category,\n//       }\n\n//       const result = await axios.post(\n//         `http://localhost:7000/api/categories`,\n//         bodyParameters,\n//         config,\n//       )\n\n//       if (result.status === 201) {\n//         dispatch({ type: FETCH_SUCCESS, products: result.data.data.products })\n//       }\n//     } catch (error) {\n//       dispatch({ type: FETCH_FAILURE })\n//     }\n//   }\n\n//   return (\n//     <ShopContext.Provider\n//       value={{\n//         products: state.products,\n//         cart: state.cart,\n//         isLoading: state.isLoading,\n//         isError: state.isError,\n//         addProductToCart: addProductToCart,\n//         removeProductFromCart: removeProductFromCart,\n//         fetchProducts: fetchProducts,\n//       }}\n//     >\n//       {props.children}\n//     </ShopContext.Provider>\n//   )\n// }\n\n// export default GlobalState\n"]},"metadata":{},"sourceType":"module"}