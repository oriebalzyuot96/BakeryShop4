{"ast":null,"code":"var _jsxFileName = \"D:\\\\ppppppppp\\\\BakeryShop4\\\\client\\\\src\\\\context\\\\store.js\";\n// import React from 'react'\n// import axios from 'axios'\n// import ShopContext from './shop-context'\n// import {\n//   shopReducer,\n//   ADD_PRODUCT,\n//   REMOVE_PRODUCT,\n//   FETCH_INIT,\n//   FETCH_SUCCESS,\n//   FETCH_FAILURE,\n// } from './reducers'\n// import categories from '../component/categories'\n// const GlobalState = props => {\n//   const [state, dispatch] = React.useReducer(shopReducer, {\n//     products: [],\n//     cart: [],\n//     isLoading: false,\n//     isError: false,\n//   })\n//   const addProductToCart = product => {\n//     setTimeout(() => {\n//       dispatch({ type: ADD_PRODUCT, product: product })\n//     }, 700)\n//   }\n//   const removeProductFromCart = productId => {\n//     setTimeout(() => {\n//       dispatch({ type: REMOVE_PRODUCT, productId: productId })\n//     }, 700)\n//   }\n//   const fetchProducts = async (token, category) => {\n//     dispatch({ type: FETCH_INIT })\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${token}` },\n//       }\n//       const bodyParameters = {\n//         category,\n//       }\n//       const result = await axios.post(\n//         `http://localhost:7000/api/categories`,\n//         bodyParameters,\n//         config,\n//       )\n//       if (result.status === 201) {\n//         dispatch({ type: FETCH_SUCCESS, products: result.data.data.products })\n//       }\n//     } catch (error) {\n//       dispatch({ type: FETCH_FAILURE })\n//     }\n//   }\n//   return (\n//     <ShopContext.Provider\n//       value={{\n//         products: state.products,\n//         cart: state.cart,\n//         isLoading: state.isLoading,\n//         isError: state.isError,\n//         addProductToCart: addProductToCart,\n//         removeProductFromCart: removeProductFromCart,\n//         fetchProducts: fetchProducts,\n//       }}\n//     >\n//       {props.children}\n//     </ShopContext.Provider>\n//   )\n// }\n// export default GlobalState\nimport React from 'react';\nimport axios from 'axios';\nimport ShopContext from './shop-context';\nimport { shopReducer, ADD_PRODUCT, REMOVE_PRODUCT, FETCH_INIT, FETCH_SUCCESS, FETCH_FAILURE } from './reducers';\n\nconst GlobalState = props => {\n  const [state, dispatch] = React.useReducer(shopReducer, {\n    cart: [],\n    products: []\n  });\n\n  const addProductToCart = product => {\n    setTimeout(() => {\n      dispatch({\n        type: ADD_PRODUCT,\n        product: product\n      });\n    }, 700);\n  };\n\n  const removeProductFromCart = productId => {\n    setTimeout(() => {\n      dispatch({\n        type: REMOVE_PRODUCT,\n        productId: productId\n      });\n    }, 700);\n  };\n\n  const useDataApi = (token, category) => {\n    React.useEffect(() => {\n      /// let didCancel = false\n      const fetchData = async () => {\n        dispatch({\n          type: FETCH_INIT\n        });\n\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          };\n          const bodyParameters = {\n            category\n          };\n          const result = await axios.post(`http://localhost:7000/api/categories`, bodyParameters, config);\n\n          if (result.status === 201) {\n            dispatch({\n              type: FETCH_SUCCESS,\n              products: result.data.data.products\n            });\n          }\n        } catch (error) {\n          dispatch({\n            type: FETCH_FAILURE\n          });\n        }\n      };\n\n      fetchData();\n      return () => {\n        didCancel = true;\n      };\n    }, [category]);\n    return state;\n  };\n\n  return /*#__PURE__*/React.createElement(ShopContext.Provider, {\n    value: {\n      products: state.products,\n      cart: state.cart,\n      // isLoading: state.isLoading,\n      // isError: state.isError,\n      addProductToCart: addProductToCart,\n      removeProductFromCart: removeProductFromCart,\n      useDataApi: useDataApi\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default GlobalState;","map":{"version":3,"sources":["D:/ppppppppp/BakeryShop4/client/src/context/store.js"],"names":["React","axios","ShopContext","shopReducer","ADD_PRODUCT","REMOVE_PRODUCT","FETCH_INIT","FETCH_SUCCESS","FETCH_FAILURE","GlobalState","props","state","dispatch","useReducer","cart","products","addProductToCart","product","setTimeout","type","removeProductFromCart","productId","useDataApi","token","category","useEffect","fetchData","config","headers","Authorization","bodyParameters","result","post","status","data","error","didCancel","children"],"mappings":"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","sourcesContent":["// import React from 'react'\n// import axios from 'axios'\n\n// import ShopContext from './shop-context'\n// import {\n//   shopReducer,\n//   ADD_PRODUCT,\n//   REMOVE_PRODUCT,\n//   FETCH_INIT,\n//   FETCH_SUCCESS,\n//   FETCH_FAILURE,\n// } from './reducers'\n// import categories from '../component/categories'\n\n// const GlobalState = props => {\n//   const [state, dispatch] = React.useReducer(shopReducer, {\n//     products: [],\n//     cart: [],\n//     isLoading: false,\n//     isError: false,\n//   })\n\n//   const addProductToCart = product => {\n//     setTimeout(() => {\n//       dispatch({ type: ADD_PRODUCT, product: product })\n//     }, 700)\n//   }\n\n//   const removeProductFromCart = productId => {\n//     setTimeout(() => {\n//       dispatch({ type: REMOVE_PRODUCT, productId: productId })\n//     }, 700)\n//   }\n\n//   const fetchProducts = async (token, category) => {\n//     dispatch({ type: FETCH_INIT })\n\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${token}` },\n//       }\n\n//       const bodyParameters = {\n//         category,\n//       }\n\n//       const result = await axios.post(\n//         `http://localhost:7000/api/categories`,\n//         bodyParameters,\n//         config,\n//       )\n\n//       if (result.status === 201) {\n//         dispatch({ type: FETCH_SUCCESS, products: result.data.data.products })\n//       }\n//     } catch (error) {\n//       dispatch({ type: FETCH_FAILURE })\n//     }\n//   }\n\n//   return (\n//     <ShopContext.Provider\n//       value={{\n//         products: state.products,\n//         cart: state.cart,\n//         isLoading: state.isLoading,\n//         isError: state.isError,\n//         addProductToCart: addProductToCart,\n//         removeProductFromCart: removeProductFromCart,\n//         fetchProducts: fetchProducts,\n//       }}\n//     >\n//       {props.children}\n//     </ShopContext.Provider>\n//   )\n// }\n\n// export default GlobalState\nimport React from 'react'\nimport axios from 'axios'\n\nimport ShopContext from './shop-context'\nimport {\n  shopReducer,\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n  FETCH_INIT,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n} from './reducers'\n\nconst GlobalState = props => {\n  const [state, dispatch] = React.useReducer(shopReducer, {\n    cart: [],\n    products: []\n  })\n\n  const addProductToCart = product => {\n    setTimeout(() => {\n      dispatch({ type: ADD_PRODUCT, product: product })\n    }, 700)\n  }\n\n  const removeProductFromCart = productId => {\n    setTimeout(() => {\n      dispatch({ type: REMOVE_PRODUCT, productId: productId })\n    }, 700)\n  }\n\n  const useDataApi = (token, category) => {\n\n    React.useEffect(() => {\n     /// let didCancel = false\n\n      const fetchData = async () => {\n        dispatch({ type: FETCH_INIT })\n\n        try {\n          const config = {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n\n          const bodyParameters = {\n            category,\n          }\n\n          const result = await axios.post(\n            `http://localhost:7000/api/categories`,\n            bodyParameters,\n            config,\n          )\n\n          if (result.status === 201) {\n            dispatch({ type: FETCH_SUCCESS, products: result.data.data.products })\n          }\n        } catch (error) {\n          \n            dispatch({ type: FETCH_FAILURE })\n         \n        }\n      }\n\n      fetchData()\n\n      return () => {\n        didCancel = true\n      }\n    }, [category])\n\n    return state\n  }\n\n  return (\n    <ShopContext.Provider\n      value={{\n        products: state.products,\n        cart: state.cart,\n        // isLoading: state.isLoading,\n        // isError: state.isError,\n        addProductToCart: addProductToCart,\n        removeProductFromCart: removeProductFromCart,\n        useDataApi: useDataApi,\n      }}\n    >\n      {props.children}\n    </ShopContext.Provider>\n  )\n}\n\nexport default GlobalState\n"]},"metadata":{},"sourceType":"module"}