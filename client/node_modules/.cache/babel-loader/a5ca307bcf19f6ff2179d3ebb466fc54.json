{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import {\n//   CardElement,\n//   useStripe,\n//   useElements\n// } from \"@stripe/react-stripe-js\";\n// // import \"./style/appp.css\"\n// export default function CheckoutForm() {\n//   const [succeeded, setSucceeded] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [processing, setProcessing] = useState('');\n//   const [disabled, setDisabled] = useState(true);\n//   const [clientSecret, setClientSecret] = useState('');\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   useEffect(() => {\n//     // Create PaymentIntent as soon as the page loads\n//     window\n//       .fetch(\"/create-payment-intent\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\"\n//         },\n//         body: JSON.stringify({items: [{ id: \"xl-tshirt\" }]})\n//       })\n//       .then(res => {\n//         return res.json();\n//       })\n//       .then(data => {\n//         setClientSecret(data.clientSecret);\n//       });\n//   }, []);\n//   const cardStyle = {\n//     style: {\n//       base: {\n//         color: \"#32325d\",\n//         fontFamily: 'Arial, sans-serif',\n//         fontSmoothing: \"antialiased\",\n//         fontSize: \"16px\",\n//         \"::placeholder\": {\n//           color: \"#32325d\"\n//         }\n//       },\n//       invalid: {\n//         color: \"#fa755a\",\n//         iconColor: \"#fa755a\"\n//       }\n//     }\n//   };\n//   const handleChange = async (event) => {\n//     // Listen for changes in the CardElement\n//     // and display any errors as the customer types their card details\n//     setDisabled(event.empty);\n//     setError(event.error ? event.error.message : \"\");\n//   };\n//   const handleSubmit = async ev => {\n//     ev.preventDefault();\n//     setProcessing(true);\n//     const payload = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//         billing_details: {\n//           name: ev.target.name.value\n//         }\n//       }\n//     });\n//     if (payload.error) {\n//       setError(`Payment failed ${payload.error.message}`);\n//       setProcessing(false);\n//     } else {\n//       setError(null);\n//       setProcessing(false);\n//       setSucceeded(true);\n//     }\n//   };\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n//       <button\n//         disabled={processing || disabled || succeeded}\n//         id=\"submit\"\n//       >\n//         <span id=\"button-text\">\n//           {processing ? (\n//             <div className=\"spinner\" id=\"spinner\"></div>\n//           ) : (\n//             \"Pay\"\n//           )}\n//         </span>\n//       </button>\n//       {/* Show any error that happens when processing the payment */}\n//       {error && (\n//         <div className=\"card-error\" role=\"alert\">\n//           {error}\n//         </div>\n//       )}\n//       {/* Show a success message upon completion */}\n//       <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n//         Payment succeeded, see the result in your\n//         <a\n//           href={`https://dashboard.stripe.com/test/payments`}\n//         >\n//           {\" \"}\n//           Stripe dashboard.\n//         </a> Refresh the page to pay again.\n//       </p>\n//     </form>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/baker/Desktop/BakeryShop4/client/src/component/checkOutForm.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   CardElement,\r\n//   useStripe,\r\n//   useElements\r\n// } from \"@stripe/react-stripe-js\";\r\n\r\n\r\n\r\n// // import \"./style/appp.css\"\r\n\r\n// export default function CheckoutForm() {\r\n//   const [succeeded, setSucceeded] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [processing, setProcessing] = useState('');\r\n//   const [disabled, setDisabled] = useState(true);\r\n//   const [clientSecret, setClientSecret] = useState('');\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n//   useEffect(() => {\r\n//     // Create PaymentIntent as soon as the page loads\r\n//     window\r\n//       .fetch(\"/create-payment-intent\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\"\r\n//         },\r\n//         body: JSON.stringify({items: [{ id: \"xl-tshirt\" }]})\r\n//       })\r\n//       .then(res => {\r\n//         return res.json();\r\n//       })\r\n//       .then(data => {\r\n//         setClientSecret(data.clientSecret);\r\n//       });\r\n//   }, []);\r\n//   const cardStyle = {\r\n//     style: {\r\n//       base: {\r\n//         color: \"#32325d\",\r\n//         fontFamily: 'Arial, sans-serif',\r\n//         fontSmoothing: \"antialiased\",\r\n//         fontSize: \"16px\",\r\n//         \"::placeholder\": {\r\n//           color: \"#32325d\"\r\n//         }\r\n//       },\r\n//       invalid: {\r\n//         color: \"#fa755a\",\r\n//         iconColor: \"#fa755a\"\r\n//       }\r\n//     }\r\n//   };\r\n//   const handleChange = async (event) => {\r\n//     // Listen for changes in the CardElement\r\n//     // and display any errors as the customer types their card details\r\n//     setDisabled(event.empty);\r\n//     setError(event.error ? event.error.message : \"\");\r\n//   };\r\n//   const handleSubmit = async ev => {\r\n//     ev.preventDefault();\r\n//     setProcessing(true);\r\n//     const payload = await stripe.confirmCardPayment(clientSecret, {\r\n//       payment_method: {\r\n//         card: elements.getElement(CardElement),\r\n//         billing_details: {\r\n//           name: ev.target.name.value\r\n//         }\r\n//       }\r\n//     });\r\n//     if (payload.error) {\r\n//       setError(`Payment failed ${payload.error.message}`);\r\n//       setProcessing(false);\r\n//     } else {\r\n//       setError(null);\r\n//       setProcessing(false);\r\n//       setSucceeded(true);\r\n//     }\r\n//   };\r\n//   return (\r\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n//       <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\r\n//       <button\r\n//         disabled={processing || disabled || succeeded}\r\n//         id=\"submit\"\r\n//       >\r\n//         <span id=\"button-text\">\r\n//           {processing ? (\r\n//             <div className=\"spinner\" id=\"spinner\"></div>\r\n//           ) : (\r\n//             \"Pay\"\r\n//           )}\r\n//         </span>\r\n//       </button>\r\n//       {/* Show any error that happens when processing the payment */}\r\n//       {error && (\r\n//         <div className=\"card-error\" role=\"alert\">\r\n//           {error}\r\n//         </div>\r\n//       )}\r\n//       {/* Show a success message upon completion */}\r\n//       <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\r\n//         Payment succeeded, see the result in your\r\n//         <a\r\n//           href={`https://dashboard.stripe.com/test/payments`}\r\n//         >\r\n//           {\" \"}\r\n//           Stripe dashboard.\r\n//         </a> Refresh the page to pay again.\r\n//       </p>\r\n//     </form>\r\n//   );\r\n// }"]},"metadata":{},"sourceType":"module"}